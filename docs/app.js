(()=>{var e={471:(e,n,r)=>{(n=r(645)(!1)).push([e.id,":root{--baseOrange: #f1c50e;--darkerOrange: #f65d2c;--blackText: #111111;--whiteBackground: #FAFAFA}*{box-sizing:border-box;margin:0;padding:0}body{background-color:#ececf3;width:100vw;height:100vh;display:flex;align-items:center;justify-content:center}.login{background-color:var(--baseOrange, orange);padding:1em;box-shadow:6px 6px 20px rgba(0,0,0,0.05)}.login__header{color:var(--blackText, black)}.login-form{margin-top:1em;display:flex;flex-direction:column;padding-left:34px;padding-right:34px}.login-form__input{color:var(--blackText, black);background-color:var(--whiteBackground, white);border:none;border-radius:15px;font-size:1em;line-height:25px;outline:none;padding:10px;margin:8px 0px}.login-form:focus{box-shadow:inset 0px 0px 3px 0px rgba(0,0,0,0.75)}.login-form__button{border:1px solid var(--darkerOrange, orange);border-radius:15px;padding:14px 28px 14px 28px;width:100px;background-color:white;color:var(--darkerOrange, orange);margin:20px 0px;align-self:flex-end;cursor:pointer;transition-property:background-color, color, font-weight;transition-duration:.5s}.login-form__button:hover{background-color:var(--darkerOrange, orange);color:white;font-weight:700}.error{font-size:0.8rem;font-style:italic;color:red}.loginTextError,.passwordTextError{font-size:0.8rem;font-style:italic;color:red}.loginInputError,.passwordInputError{border:2px solid red}.lds-ring{position:fixed;display:none;width:80px;height:80px;left:50%;top:50%;transform:translate(-50%, -50%)}.lds-ring div{box-sizing:border-box;display:block;position:absolute;width:64px;height:64px;margin:8px;border:8px solid var(--darkerOrange, red);border-radius:50%;-webkit-animation:lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;animation:lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;border-color:var(--darkerOrange, red) transparent transparent transparent}.lds-ring div:nth-child(1){-webkit-animation-delay:-0.45s;animation-delay:-0.45s}.lds-ring div:nth-child(2){-webkit-animation-delay:-0.3s;animation-delay:-0.3s}.lds-ring div:nth-child(3){-webkit-animation-delay:-0.15s;animation-delay:-0.15s}@-webkit-keyframes lds-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes lds-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.navigation{position:fixed;top:15px;left:15px}.navigation__link{text-decoration:none;color:var(--blackText, black)}\n",""]),e.exports=n},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r=function(e,n){var r,t,o,i=e[1]||"",a=e[3];if(!a)return i;if(n&&"function"==typeof btoa){var s=(r=a,t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),"/*# ".concat(o," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(r,"}"):r})).join("")},n.i=function(e,r,t){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);t&&o[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),n.push(l))}},n}},425:(e,n,r)=>{var t=r(379),o=r(471);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,""]]);t(o,{insert:"head",singleton:!1}),e.exports=o.locals||{}},379:(e,n,r)=>{"use strict";var t,o=function(){var e={};return function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[n]=r}return e[n]}}(),i=[];function a(e){for(var n=-1,r=0;r<i.length;r++)if(i[r].identifier===e){n=r;break}return n}function s(e,n){for(var r={},t=[],o=0;o<e.length;o++){var s=e[o],l=n.base?s[0]+n.base:s[0],c=r[l]||0,d="".concat(l," ").concat(c);r[l]=c+1;var u=a(d),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(p)):i.push({identifier:d,updater:m(p,n),references:1}),t.push(d)}return t}function l(e){var n=document.createElement("style"),t=e.attributes||{};if(void 0===t.nonce){var i=r.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(e){n.setAttribute(e,t[e])})),"function"==typeof e.insert)e.insert(n);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var c,d=(c=[],function(e,n){return c[e]=n,c.filter(Boolean).join("\n")});function u(e,n,r,t){var o=r?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(e.styleSheet)e.styleSheet.cssText=d(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function p(e,n,r){var t=r.css,o=r.media,i=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var f=null,g=0;function m(e,n){var r,t,o;if(n.singleton){var i=g++;r=f||(f=l(n)),t=u.bind(null,r,i,!1),o=u.bind(null,r,i,!0)}else r=l(n),t=p.bind(null,r,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var r=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var t=0;t<r.length;t++){var o=a(r[t]);i[o].references--}for(var l=s(e,n),c=0;c<r.length;c++){var d=a(r[c]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}r=l}}}}},n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,r),o.exports}(()=>{"use strict";var e={},n=function n(r,t){"home"===r&&(document.querySelector("#app").innerHTML='\n   <div id="home">\n   <div class="login">\n    <h1 class="login__header"><%= title %></h1>\n    <div class="form">\n    <form class="login-form">\n        <input id="login" class="login-form__input" type="text" placeholder="Login" name="login" required>\n        <input id="password" class="login-form__input" type="password" placeholder="Password" name="password" required>\n        <button class="login-form__button" type="submit"><%= action %></button>\n    </form>\n    </div>\n    </div>\n    <div class="lds-ring"><div></div><div></div><div></div><div></div></div>\n   </div>'),"success"===r&&(document.querySelector("#app").innerHTML='\n    <div id="success" class="login">\n        <nav class="navigation">\n            <a class="navigation__link" href="#">← Powrót do logowania</a>\n        </nav>\n        <h1><%= title %></h1>\n    </div>\n    ');var o=/\W/.test(r)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+r.replace(/[\r\t\n]/g," ").split("&lt;%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%&gt;/g,"',$1,'").split("\t").join("');").split("%&gt;").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):e[r]=e[r]||n(document.getElementById(r).innerHTML);return t?o(t):o},t=null,o=[],i={},a=function(e,n,r){var t=[];r.prototype.$on=function(e,n,r){return o.push([e,n,r])},r.prototype.$refresh=function(){return t.forEach((function(e){return e()}))},i[e]={templateId:n,controller:r,onRefresh:t.push.bind(t)}},s=function(e){for(var n=0;n<o.length;n++)for(var r=t.querySelectorAll(o[n][0]),i=0;i<r.length;i++)r[i][e].apply(r[i],o[n].slice(1))},l=function(){t=t||document.getElementById("app"),s("removeEventListener"),o=[];var e=location.hash.slice(1)||"/",r=i[e]||i["*"];if(r&&r.controller){var a=new r.controller;r.onRefresh((function(){s("removeEventListener"),t.innerHTML=n(r.templateId,a),s("addEventListener")})),a.$refresh()}};window.addEventListener("hashchange",l),window.addEventListener("load",l),r(425);var c=function(e,n){var r=document.createElement("p");return r.className=e,r.appendChild(document.createTextNode(n)),r};a("/","home",(function(){this.title="Logowanie",this.action="Send",this.$on(".login-form__button","click",(function(e){var n=function(){var e=document.querySelector("#login");if(0==e.value.length){if(!e.classList.contains("loginInputError")){e.classList.add("loginInputError");var n=c("loginTextError","To pole nie może być puste!");e.parentElement.insertBefore(n,e.nextElementSibling)}return!1}return e.classList.remove("loginInputError"),e.value=e.value.trim(),document.querySelector(".loginTextError")&&document.querySelector(".loginTextError").remove(),!0}(),r=function(){var e=document.querySelector("#password");if(0==e.value.length){if(!e.classList.contains("passwordInputError")){e.classList.add("passwordInputError");var n=c("passwordTextError","To pole nie może być puste!");e.parentElement.insertBefore(n,e.nextElementSibling)}return!1}return e.classList.remove("passwordInputError"),e.value=e.value.trim(),document.querySelector(".passwordTextError")&&document.querySelector(".passwordTextError").remove(),!0}();if(console.log("login: ".concat(n,", password: ").concat(r)),n&&r){var t={username:document.querySelector("#login").value,password:document.querySelector("#password").value},o=new Headers;o.append("Content-Type","application/json"),document.querySelector(".lds-ring").style.display="block",fetch("https://zwzt-zadanie.netlify.app/api/login",{method:"post",headers:o,body:JSON.stringify(t)}).then((function(e){return e.json()})).then((function(e){if(document.querySelector(".lds-ring").style.display="none","Login success!"===e.message){var n=window.location.href;"#"===n.charAt(n.length-1)&&(n=n.slice(0,-1)),sessionStorage.setItem("login","success"),location.replace("".concat(n,"#/success"))}else if(!document.querySelector(".error")){var r=document.createElement("div");r.className="error";var t=document.createTextNode("Wprowadziłeś nieprawidłowy login lub hasło!");r.appendChild(t),document.querySelector(".login").appendChild(r),sessionStorage.setItem("login","failed")}})),document.querySelector("#login").value="",document.querySelector("#password").value="",e.preventDefault()}else e.preventDefault()}))})),a("/success","success",(function(){"success"===sessionStorage.getItem("login")?this.title="Logowanie przebiegło pomyślnie.":this.title="Strona dostępna tylko dla zalogowanych."})),a("*","404",(function(){}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,